<Window x:Class="ToDoWpf.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ToDoWpf.Views"
        xmlns:vm="clr-namespace:ToDoWpf.ViewModels"
        xmlns:common="clr-namespace:ToDoWpf.Common"
        xmlns:conv="clr-namespace:ToDoWpf.Converters"
        xmlns:tb="http://www.hardcodet.net/taskbar"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800"
        Closing="Window_Closing"
        StateChanged="Window_StateChanged">
    <!--このViewに紐付くViewModelクラスを指定-->
    <Window.DataContext>
        <vm:MainWindowViewModel />
    </Window.DataContext>
    <Window.Resources>
        <conv:IsPastDayConverter x:Key="IsPastDayConverter" />
    </Window.Resources>
    <Grid>
        <!--グリッドの行のサイズを設定する-->
        <Grid.RowDefinitions>
            <!--上段には新規タスク追加用のテキストボックスとボタンを配置-->
            <RowDefinition Height="auto" />
            <!--中段（残り領域全部）にはタスク一覧を配置-->
            <RowDefinition Height="*" />
            <!--下段には通知領域に格納するチェックボックスを配置-->
            <RowDefinition Height="auto" />
        </Grid.RowDefinitions>

        <!--通知領域-->
        <tb:TaskbarIcon x:Name="taskbarIcon" IconSource="/ToDoWpf;component/Resources/ToDoWpf.ico" ToolTipText="ToDoWpf" Visibility="Collapsed">
            <tb:TaskbarIcon.ContextMenu>
                <ContextMenu>
                    <MenuItem x:Name="ShowWindowMenuItem" Header="ウィンドウを表示" Click="ShowWindowMenuItem_Click" />
                    <MenuItem x:Name="ExitMenuItem" Header="終了" Click="ExitMenuItem_Click" />
                </ContextMenu>
            </tb:TaskbarIcon.ContextMenu>
        </tb:TaskbarIcon>

        <!--上段のレイアウト-->
        <Grid Grid.Row="0">
            <!--テキストボックスとボタンを横にくっつける-->
            <Grid>
                <Grid.ColumnDefinitions>
                    <!--テキストボックスの幅は残りの領域-->
                    <ColumnDefinition Width="*" />
                    <!--日付選択コントロールの幅は自動-->
                    <ColumnDefinition Width="auto" />
                    <!--優先度コンボボックスの幅は自動-->
                    <ColumnDefinition Width="auto" />
                    <!--ボタンの幅は自動-->
                    <ColumnDefinition Width="auto" />
                    <ColumnDefinition Width="auto" />
                </Grid.ColumnDefinitions>
                
                <!--テキストボックス-->
                <!--Gridタグの子要素にしてもよいが、1つの要素しか入れないのでこう書いて簡略化する-->
                <TextBox x:Name="tbInputTask" Grid.Column="0" Text="{Binding InputTask.Name, UpdateSourceTrigger=PropertyChanged}" />
                
                <!--日付選択コントロール-->
                <DatePicker Grid.Column="1" SelectedDate="{Binding InputTask.DueDate}" />
                
                <!--優先度コンボボックス-->
                <ComboBox Grid.Column="2" ItemsSource="{Binding Priorities}" SelectedItem="{Binding InputTask.Priority}" />

                <!--押しにくいので左右に余白を設ける-->
                <!--パディングは以下のパターンで設定できる-->
                <!-- Padding="左,上,右,下" -->
                <!-- Padding="左右,上下" -->
                <!-- Padding="上下左右" -->
                <Button x:Name="btnInputTask" Content="追加" Grid.Column="3" Padding="10,0" Command="{Binding AddCommand}" />
                <Button x:Name="btnRemoveTask" Content="削除" Grid.Column="4" Padding="10,0" Command="{Binding RemoveCommand}" />
            </Grid>
        </Grid>
        
        <!--中段のレイアウト-->
        <Grid Grid.Row="1">
            <!--タスク一覧を表示するリストボックス（派生型の ListView というものもある）-->
            <ListBox x:Name="lbTasks" ItemsSource="{Binding Tasks}" SelectedItem="{Binding SelectedTask}" DisplayMemberPath="Name">
                <ListBox.ItemContainerStyle>
                    <Style TargetType="{x:Type ListBoxItem}">
                        <Style.Triggers>
                            <!--優先度 高のとき背景色を変更する-->
                            <DataTrigger Binding="{Binding Path=Priority}" Value="{x:Static common:Priority.High}">
                                <Setter Property="Background" Value="Yellow" />
                            </DataTrigger>
                            <!--優先度 低のとき背景色を変更する-->
                            <DataTrigger Binding="{Binding Path=Priority}" Value="{x:Static common:Priority.Low}">
                                <Setter Property="Background" Value="LightBlue" />
                            </DataTrigger>
                            <!--期限超過していたら背景色を変更する-->
                            <DataTrigger Binding="{Binding Path=DueDate, Converter={StaticResource IsPastDayConverter}}" Value="True">
                                <Setter Property="Foreground" Value="Red" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </ListBox.ItemContainerStyle>
            </ListBox>
            <!--同じ文字列にも別のGuidが振られていることを確認するには、↓こちらをコメントアウトする-->
            <!--<ListBox x:Name="lbTasks" ItemsSource="{Binding Tasks}" SelectedItem="{Binding SelectedTask}">
                <ListBox.ItemTemplate>
                    <DataTemplate>
                        <TextBlock>
                            <TextBlock.Text>
                                <MultiBinding StringFormat="{}{0} | {1}">
                                    <Binding Path="Guid" />
                                    <Binding Path="Name" />
                                </MultiBinding>
                            </TextBlock.Text>
                        </TextBlock>
                    </DataTemplate>
                </ListBox.ItemTemplate>
            </ListBox>-->
        </Grid>
        
        <!--下段のレイアウト-->
        <Grid Grid.Row="2">
            <CheckBox Content="アプリケーション終了時、通知領域に格納する" IsChecked="{Binding ExitAsMinimized}" Margin="5" />
        </Grid>
    </Grid>
</Window>
