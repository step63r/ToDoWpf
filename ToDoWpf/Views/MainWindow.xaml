<Window x:Class="ToDoWpf.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ToDoWpf.Views"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
        xmlns:vm="clr-namespace:ToDoWpf.ViewModels"
        xmlns:common="clr-namespace:ToDoWpf.Common"
        xmlns:conv="clr-namespace:ToDoWpf.Converters"
        xmlns:behaviors="clr-namespace:ToDoWpf.Behaviors"
        xmlns:tb="http://www.hardcodet.net/taskbar"
        xml:lang="ja-JP"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800"
        Closing="Window_Closing"
        StateChanged="Window_StateChanged">
    <!--このViewに紐付くViewModelクラスを指定-->
    <Window.DataContext>
        <vm:MainWindowViewModel />
    </Window.DataContext>
    <Window.Resources>
        <conv:IsPastDayConverter x:Key="IsPastDayConverter" />
    </Window.Resources>
    <Grid behaviors:OpenWindowAttachedBehavior.CloseCommand="{Binding CloseDialogCommand}"
          behaviors:OpenWindowAttachedBehavior.HasOwner="True"
          behaviors:OpenWindowAttachedBehavior.IsModal="True"
          behaviors:OpenWindowAttachedBehavior.WindowViewModel="{Binding DialogViewModel}">
        <behaviors:OpenWindowAttachedBehavior.WindowTemplate>
            <DataTemplate>
                <local:TaskDialogView />
            </DataTemplate>
        </behaviors:OpenWindowAttachedBehavior.WindowTemplate>

        <!--グリッドの行のサイズを設定する-->
        <Grid.RowDefinitions>
            <!--上段には新規タスク追加用のテキストボックスとボタンを配置-->
            <RowDefinition Height="auto" />
            <!--中段（残り領域全部）にはタスク一覧を配置-->
            <RowDefinition Height="*" />
            <!--下段には通知領域に格納するチェックボックスを配置-->
            <RowDefinition Height="auto" />
        </Grid.RowDefinitions>

        <!--通知領域-->
        <tb:TaskbarIcon x:Name="taskbarIcon" IconSource="/ToDoWpf;component/Resources/ToDoWpf.ico" ToolTipText="ToDoWpf" Visibility="Collapsed">
            <tb:TaskbarIcon.ContextMenu>
                <ContextMenu>
                    <MenuItem x:Name="ShowWindowMenuItem" Header="ウィンドウを表示" Click="ShowWindowMenuItem_Click" />
                    <MenuItem x:Name="ExitMenuItem" Header="終了" Click="ExitMenuItem_Click" />
                </ContextMenu>
            </tb:TaskbarIcon.ContextMenu>
        </tb:TaskbarIcon>

        <!--上段のレイアウト-->
        <Grid Grid.Row="0">
            <!--新規作成ボタン-->
            <Button Content="新規作成" Height="30" Command="{Binding CreateNewCommand}" />
        </Grid>

        <!--中段のレイアウト-->
        <Grid Grid.Row="1">
            <!--タスク一覧を表示するリストボックス（派生型の ListView というものもある）-->
            <ListBox x:Name="lbTasks" ItemsSource="{Binding Tasks}" SelectedItem="{Binding SelectedTask}" HorizontalContentAlignment="Stretch">
                <ListBox.InputBindings>
                    <!--Enterキー押下でもダブルクリックと同じ動作をする-->
                    <KeyBinding Key="Return" Command="{Binding ShowDetailCommand}" />
                    <!--Deleteキー押下でも「削除」ボタンと同じ動作をする-->
                    <KeyBinding Key="Delete" Command="{Binding RemoveCommand}" />
                </ListBox.InputBindings>
                <ListBox.ItemTemplate>
                    <DataTemplate>
                        <ContentControl Content="{Binding Name}" >
                            <i:Interaction.Triggers>
                                <!--ダブルクリック時、タスク詳細ダイアログを開く-->
                                <i:EventTrigger EventName="MouseDoubleClick">
                                    <i:InvokeCommandAction Command="{Binding DataContext.ShowDetailCommand, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}" />
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </ContentControl>
                    </DataTemplate>
                </ListBox.ItemTemplate>
                <ListBox.ItemContainerStyle>
                    <Style TargetType="{x:Type ListBoxItem}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="ListBoxItem">
                                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                                        <ContentPresenter />
                                    </Border>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <!--選択されているタスクは太字にして枠線をつける-->
                            <Trigger Property="IsSelected" Value="True">
                                <Setter Property="FontWeight" Value="Bold" />
                                <Setter Property="BorderBrush" Value="Blue" />
                                <Setter Property="BorderThickness" Value="1" />
                            </Trigger>

                            <!--優先度 高のとき背景色を変更する-->
                            <DataTrigger Binding="{Binding Path=Priority}" Value="{x:Static common:Priority.High}">
                                <Setter Property="Background" Value="Yellow" />
                            </DataTrigger>
                            <!--優先度 低のとき文字色を変更する-->
                            <DataTrigger Binding="{Binding Path=Priority}" Value="{x:Static common:Priority.Low}">
                                <Setter Property="Foreground" Value="DarkGray" />
                            </DataTrigger>
                            <!--期限超過していたら文字色を変更する-->
                            <DataTrigger Binding="{Binding Path=DueDate, Converter={StaticResource IsPastDayConverter}}" Value="True">
                                <Setter Property="Foreground" Value="Red" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </ListBox.ItemContainerStyle>
            </ListBox>
        </Grid>

        <!--下段のレイアウト-->
        <Grid Grid.Row="2">
            <CheckBox Content="アプリケーション終了時、通知領域に格納する" IsChecked="{Binding ExitAsMinimized}" Margin="5" />
        </Grid>
    </Grid>
</Window>
